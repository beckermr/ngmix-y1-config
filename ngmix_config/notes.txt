tb-y1a1-us82-48-001
    - 48x48 min box size in meds files
    - similar
tb-y1a1-us82-48-002
    - coellip3 psf
    - not symmetrizing psf
    - it is *flat* vs epsf, but still large Rpsf!
    - I do see evidence of correlated noise in the sheared psfs

tb-y1a1-us82-48-003
    - coellip3, symmetrize psf
    - but now I realize symmetrized psfs get correlated noise naturally, so might
      cause problems too.  We shall see

tb-y1a1-us82-48-004
    - similar to 001 but turning off symmetrizing weight/bmask
    - same
tb-y1a1-us82-48-005
    - similar to 004 but trimming psf to 31,31
    - same

tb-y1a1-us82-48-007
    - matched to y1 gold gal
    - s/n > 15

    - <g> vs <gpsf1>
        g1: (-0.0206 +/- 0.0113) x + (0.000601 +/- 0.000234)
        g2: (-0.00442 +/- 0.00891) x + (0.000597 +/- 0.000184)
    fitting -0.02,0.02
    - <g> vs psf g2
        g1: (0.0157 +/- 0.0133) x + (0.000217 +/- 0.000137)
        g2: (0.00501 +/- 0.0134) x + (0.000446 +/- 0.000137)

    fitting -0.015,0.013
        g1: (0.0189 +/- 0.0107) x + (0.000142 +/- 0.000132)
        g2: (0.0121 +/- 0.00994) x + (0.00036 +/- 0.000123)

tb-y1a1-us82-48-008
    - desdm psfs

tb-y1a1-us82-48-009
    - v10 psfs

    vs g1psf
        g1: (-0.0391 +/- 0.0175) g1psf + (0.00117 +/- 0.000364)
        g2: (-0.0223 +/- 0.0148) g1psf + (0.00113 +/- 0.000307)

    vs g2psf
        g1: (0.042 +/- 0.0194)   g2psf + (0.000223 +/- 0.00024)
        g2: (-0.0668 +/- 0.0214) g2psf + (0.00108 +/- 0.000266)


tb-y1a1-us82-48-010
    - v11 psfs
    - very similar to v02 psfs


y1a1-spt-004
    - riz centering psf
    - looks similar
y1a1-spt-005
    - riz centering psf
    - broad prior
    - looks similar
y1a1-spt-006
    - riz centering psf
    - tightprior
    - looks better, although still a slope vs psf
    - doing more tiles
y1a1-spt-007
    - riz centering psf
    - tightprior
    - not symmetrizing psf


try removing all bad pix images, uberseg
    - us82-005t
    - us82-002
    - us82-003 riz
collate rest of the mof run and do a new nbr subtraction run
    - us82-006t looks similar to 005t with uberseg

- better psf fitting
    - would help s/g separation
- better model fitting
    - would help everything
- old psf
    - as a check
- more bands (would just hide the problem?)
- more random realizations
    - would help everything


us82-001
    using new mof run 
        mof_version: "y1a1-us82-mof-003"
    running max like with 2 gauss psf, gauss gal

    megamix-us82-001.sh
        - currently running the 16 first tiles.

Series of tests with max like, to see what might
be related to the leakage

All had em3 PSF
001 and 005 are best

ngmix-tb-y1a1-v01c-max-001.yaml
    cmodel
    not making corrected meds
    uberseg
    checking for cen missing
    not symmetrizing anything

ngmix-tb-y1a1-v01c-max-002.yaml
    cmodel
    making corrected meds
    uberseg
    checking for cen or nbrs missing
    symmetrizing mask and weight

ngmix-tb-y1a1-v01c-max-003.yaml
    cmodel
    making corrected meds
    regular weight
    checking for cen or nbrs missing
    symmetrizing mask and weight

ngmix-tb-y1a1-v01c-max-004.yaml
    exp
    making corrected meds
    regular weight
    checking for cen or nbrs missing
    symmetrizing mask and weight

ngmix-tb-y1a1-v01c-max-005.yaml
    bug fix symmetrizing weight
    cmodel
    making corrected meds
    regular weight
    checking for cen or nbrs missing
    symmetrizing mask and weight

ngmix-tb-y1a1-v01c-max-006.yaml
    like 005 but
        - rejecting outliers in the corrector code
        - using one-over-side for max frac

We might end up at nersc, where using python isn't nice.
What are the essential pieces of the code?

- read MEDS files
    - deal with flags (hash table)
- read psfex files
* uberseg
    - already have some C code for part of it, but where statements etc.
    are harder in C/C++
* nbr subtraction
    - this is totally python code
* efficient max like fitting, with priors
    - compile with fortran minpack?
    - or code up the simplex in C, fixing errors.  Simplex is much less
      efficient, but easy to code up.
* metacal
    - deconvolve images
    - shear images
    - reconvolve images
    - galsim isn't a C library
- write standard file format

I think the galsim calls and the nbr subtraction are the real difficulty here.
We could write out N new MEDS files with sheared images, but would need new
versions of these for any new PSF.  Porting the code to straight C would be
too much work.  Writing my app in C++ sounds horrific.
